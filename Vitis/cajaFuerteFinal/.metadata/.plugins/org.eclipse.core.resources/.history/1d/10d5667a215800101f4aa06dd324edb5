#include <stdio.h>
#include <string.h>
#include "xparameters.h"     // Direcciones base de los perif�ricos (XPAR_...)
#include "xil_io.h"          // Funciones de E/S de nivel bajo (Xil_In32, Xil_Out32)
#include "teclado.h"
#include "motor.h"
#include "rgb_leds.h"
#include "matrizpuntos.h"
#include "sleep.h"

u32 password, passRead;

//// Patrones para los caracteres
const u8 COPRO[7][9] = {
		{4, 10, 0, 14, 14, 30, 30, 14 ,0},       // I
		{4, 31, 0, 17, 17, 17, 17, 17, 0},  // ❤
		{4, 31, 0, 16, 17, 17, 17, 17, 0}, // C
		{4, 31, 0, 16, 17, 30, 30, 17, 0}, // O
		{4, 14, 0, 16, 17, 16, 20, 17, 0}, // P
		{4,  4, 0, 17, 17, 16, 18, 17, 0}, // R
		{4,  0, 0, 14, 14, 16, 17, 14, 0}  // O
		//   I  ❤               C   O   P   R   O
};

const u8 SAVED[7][9] = {
		{15,   4,  17,  31,  28,  4,  4, 0, 0},
		{16,  10,  17,  16,  18,  4,  4, 0, 0},
		{16,  17,  17,  16,  17,  4,  4, 0, 0},
		{14,  31,  17,  28,  17,  4,  4, 0, 0},
		{ 1,  17,  17,  16,  17,  4,  4, 0, 0},
		{ 1,  17,  10,  16,  18,  0,  0, 0, 0},
		{30,  17,   4,  31,  28,  4,  4, 0, 0}
	  //  S    A    V    E   D    !   !
};

const u8 ERROR[7][9] = {
		{31,  30, 30, 14, 30, 4, 4 ,0, 0},
		{16,  17, 17, 17, 17, 4, 4, 0, 0},
		{16,  17, 17, 17, 17, 4, 4, 0, 0},
		{28,  30, 30, 17, 30, 4, 4, 0, 0},
		{16,  20, 20, 17, 20, 4, 4, 0, 0},
		{16,  18, 18, 17, 18, 0, 0, 0, 0},
		{31,  17, 17, 14, 17, 4, 4, 0, 0}
	//    E    R   R   O   R  !  !
};

const u8 DELETED[7][9] = {
		{28, 31, 16, 31, 31, 31, 28, 0 ,0},
		{18, 16, 16, 16,  4, 16, 18, 0, 0},
		{17, 16, 16, 16,  4, 16, 17, 0, 0},
		{17, 28, 16, 28,  4, 28, 17, 0, 0},
		{17, 16, 16, 16,  4, 16, 17, 0, 0},
		{18, 16, 16, 16,  4, 16, 18, 0, 0},
		{28, 31, 31, 31,  4, 31, 28, 0, 0}
	//   D   E   L    E   T   E   D
};

const u8 OPENED[7][9] = {
		{14, 31, 31, 17, 31, 28, 0, 0 ,0},       // I
		{17, 17, 16, 25, 16, 18, 0, 0, 0},  // ❤
		{17, 17, 16, 25, 16, 17, 0, 0, 0}, // C
		{17, 31, 28, 21, 28, 17, 0, 0, 0}, // O
		{17,  4, 16, 19, 16,  7, 0, 0, 0}, // P
		{17,  4, 16, 19, 16,  8, 0, 0, 0}, // R
		{14,  4, 31, 17, 31, 28, 0, 0, 0}  // O
	//    O   P   E   N   E   D
};

const u8 CLOSING[7][9] = {
		{15, 16, 14, 15,  4, 17, 15, 0 ,0},
		{16, 16, 17, 16,  4, 25, 16, 0, 0},
		{16, 16, 17, 16,  4, 25, 16, 0, 0},
		{16, 16, 17, 14,  4, 21, 22, 0, 0},
		{16, 16, 17,  1,  4, 19, 17, 0, 0},
		{16, 16, 17,  1,  4, 19, 17, 0, 0},
		{15, 31, 14, 30,  4, 17, 14, 0, 0}
	//    C   L   O   S   I   N   G
};

const u8 VACIO[7][9] = {
		{0, 0, 0, 0, 0, 0, 0, 0 ,0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0}
	//    C   L   O   S   I   N   G
};

void write_character_to_ram(u32 char_idx, const u8 *char_data) {
	for (u32 row = 0; row < 8; row++) {
		u8 dato = char_data[row]; // Dato de 5 bits para la fila

		u32 reg_value = 0;
		reg_value |= (char_idx & 0x7) << 24;    // fila (bits 26:24)
		reg_value |= (row & 0x7) << 17;         // columna (bits 19:17)
		reg_value |= (dato & 0x1F) << 8;        // dato (bits 12:8)

		// Escribir en slv_reg0 para establecer 'fila', 'columna', 'dato'
		MATRIZPUNTOS_mWriteReg(XPAR_MATRIZPUNTOS_0_S00_AXI_BASEADDR, MATRIZPUNTOS_S00_AXI_SLV_REG0_OFFSET, reg_value);

		// La señal 'load' se activa automáticamente al escribir en slv_reg0
		usleep(100); // Pequeño retraso para asegurar la escritura
	}
}

void deletePass(){

	password = 0;

	for (u32 char_idx = 0; char_idx < 7; char_idx++) {
		write_character_to_ram(char_idx, DELETED[char_idx]);
	}

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 128); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);   // Verde apagado
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 127);   // Azul apagado

	usleep(1000000);

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 0);   // Azul apagado

	usleep(1000000);

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 128); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 127);   // Azul apagado

	usleep(1000000);

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 0);   // Azul apagado

	usleep(1000000);

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 128); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 127);   // Azul apagado

	usleep(1000000);

	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0); // Rojo m�ximo
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 0);   // Azul apagado

	for (u32 char_idx = 0; char_idx < 7; char_idx++) {
		write_character_to_ram(char_idx, VACIO[char_idx]);
	}
}

void newPassword(){

	xil_printf (" Introduce la nueva contrase�a \n\r" );
	u32 teclaOld = 0;
	u32 dataRead = 0;  // Almacenar� la tecla presionada
	u8 completado = 0;

	dataRead = TECLADO_mReadReg(XPAR_TECLADO_0_S00_AXI_BASEADDR, TECLADO_S00_AXI_SLV_REG0_OFFSET);
	xil_printf (" Se ha leido %d del registro 0 del teclado \n\r" , dataRead );
	TECLADO_mWriteReg ( XPAR_TECLADO_0_S00_AXI_BASEADDR , 0 ,0);
	teclaOld = dataRead;

	while(completado == 0){

		if ( dataRead != teclaOld ) {
			xil_printf (" Se ha leido %d del registro 0 del teclado \n\r" , dataRead );
			teclaOld = dataRead ;
			switch(dataRead){
			case 1:
				password = (password * 10) + dataRead;
				break;
			case 2:
				password = (password * 10) + dataRead;
				break;
			case 3:
				password = (password * 10) + dataRead;
				break;
			case 4:
				password = (password * 10) + dataRead;
				break;
			case 5:
				password = (password * 10) + dataRead;
				break;
			case 6:
				password = (password * 10) + dataRead;
				break;
			case 7:
				password = (password * 10) + dataRead;
				break;
			case 8:
				password = (password * 10) + dataRead;
				break;
			case 9:
				password = (password * 10) + dataRead;
				break;
			case 10:
				if(password > 1000 && password < 100000000){
					xil_printf (" Contrase�a guardada correctamente \n\r");
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
					usleep(1000000);
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
					usleep(1000000);
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
					usleep(1000000);
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
					usleep(1000000);
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
					usleep(1000000);
					RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
					completado = 1;
				}
				else if (password > 10000000) {
					xil_printf (" Se ha superado el limite de 8 digitos de la contrase�a, debe eliminar algunos \n\r");
				}
				else{
					xil_printf (" La contrase�a no llega al minimo de digitos, introduzca algunos mas \n\r");
				}
				break;
			case 11:
				password = password/10;
				break;
			case 14:
				xil_printf (" La contrase�a escrita actualmente es %d \n\r", password);
				break;
			default:
				break;
			}
		}

		dataRead = TECLADO_mReadReg ( XPAR_TECLADO_0_S00_AXI_BASEADDR , 0);

	}
}

void checkPass(){
	if(password < 1000){
		xil_printf (" No hay ninguna contrase�a guardada, pulse F para crear una nueva contrase�a \n\r");
	}
	else if(passRead < 1000 || passRead > 100000000){
		xil_printf (" La contrase�a leida actualmente es superior a los limites de 4 a 8 digitos \n\r");
	}
	else{
		if (passRead == password){
			xil_printf (" La contrase�a es correcta \n\r");
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
			//Mover motor
			//Escribir open en matriz
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 255);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
		}
		else{
			xil_printf (" Contrase�a incorrecta \n\r");
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 255);
			//Escribir ERROR en matriz
			for (u32 char_idx = 0; char_idx < 7; char_idx++) {
				write_character_to_ram(char_idx, ERROR[char_idx]);
			}
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 255);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 255);
			usleep(1000000);
			RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0);
		}
	}
}

int main(){
	u32 teclaOld = 0;
	u32 dataRead = 0;  // Almacenar� la tecla presionada
	password = 0;
	passRead = 0;

	for (u32 char_idx = 0; char_idx < 7; char_idx++) {
		write_character_to_ram(char_idx, VACIO[char_idx]);
	}

	// Inicializa el LED a apagado
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 0);
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG1_OFFSET, 0);
	RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG2_OFFSET, 0);

	xil_printf("Escoga una opcion:\n\r");
	xil_printf("1-9.- Introducir un digito.\n\r");
	xil_printf("A.- Comprobar contrasena.\n\r");
	xil_printf("B.- Borrar un digito.\n\r");
	xil_printf("C.- Borrar contrasena.\n\r");
	xil_printf("D.- Mostrar contrasena escrita por el momento. \n\r");
	xil_printf("F.- Introducir nueva contrasena.\n\r");
	xil_printf(" Pulse una tecla cualquiera \n\r");

	dataRead = TECLADO_mReadReg(XPAR_TECLADO_0_S00_AXI_BASEADDR, 0);
	xil_printf (" Se ha leido %d del registro 0 del teclado \n\r" , dataRead );
	TECLADO_mWriteReg ( XPAR_TECLADO_0_S00_AXI_BASEADDR , 0 ,0);
	teclaOld = dataRead;

	while(1){

		if ( dataRead != teclaOld ) {
			xil_printf (" Se ha leido %d del registro 0 del teclado \n\r" , dataRead );
			teclaOld = dataRead ;
			switch(dataRead){
			case 1:
				xil_printf (" test 1\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 2:
				xil_printf (" test2 \n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 3:
				xil_printf (" test 3\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 4:
				xil_printf (" test 4\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 5:
				xil_printf (" test 5\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 6:
				xil_printf (" test 6\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 7:
				xil_printf (" test 7\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 8:
				xil_printf (" test 8\n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 9:
				xil_printf (" test9 \n\r" );
				if(password != 0){
					passRead = (passRead*10) + dataRead;
				}
				break;
			case 10:
				xil_printf (" test a\n\r" );
				checkPass();
				passRead = 0;
				break;
			case 11:
				xil_printf (" test b\n\r" );
				if(passRead > 0){
					passRead /= 10;
				}
				break;
			case 12:
				xil_printf (" test c\n\r" );
				deletePass();
				break;
			case 13:
				xil_printf (" test d\n\r" );
				xil_printf ("La contrasena leida por el momento es %d\n\r" , passRead );
				break;
			case 14:
				//Cerrar motor
				//Escribir en matriz close
				RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 255);
				usleep(3000000);
				RGB_LEDS_mWriteReg(XPAR_RGB_LEDS_0_S00_AXI_BASEADDR, RGB_LEDS_S00_AXI_SLV_REG0_OFFSET, 255);
			case 15:
				xil_printf (" test f\n\r" );
				newPassword();
				break;
			default:
				break;
			}
		}

		dataRead = TECLADO_mReadReg ( XPAR_TECLADO_0_S00_AXI_BASEADDR , 0);
		//TECLADO_mWriteReg ( XPAR_TECLADO_0_S00_AXI_BASEADDR , 0 , 0);

	}
}
