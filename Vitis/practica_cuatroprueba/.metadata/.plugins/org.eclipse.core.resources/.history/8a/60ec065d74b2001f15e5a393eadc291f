#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "conversorad.h"
#include "matrizpuntos.h"
#include "sleep.h"

#define MATRIZ_BASEADDR XPAR_MATRIZPUNTOS_0_S00_AXI_BASEADDR

//// Patrones para los caracteres
//const u8 CHARACTERS[7][8] = {
//    {4, 4, 4, 4, 4, 4, 4, 4},       // I
//    {14, 31, 31, 31, 14, 4, 0, 0},  // ❤
//    {14, 17, 16, 16, 16, 17, 14, 0}, // C
//    {14, 17, 17, 17, 17, 17, 14, 0}, // O
//    {30, 17, 17, 30, 16, 16, 16, 0}, // P
//    {30, 17, 17, 30, 20, 18, 17, 0}, // R
//    {14, 17, 17, 17, 17, 17, 14, 0}  // O
//};
//
//void write_character_to_ram(u32 char_idx, const u8 *char_data) {
//    for (u32 row = 0; row < 8; row++) {
//        u8 dato = char_data[row]; // Dato de 5 bits para la fila
//
//        u32 reg_value = 0;
//        reg_value |= (char_idx & 0x7) << 24;    // fila (bits 26:24)
//        reg_value |= (row & 0x7) << 17;         // columna (bits 19:17)
//        reg_value |= (dato & 0x1F) << 8;        // dato (bits 12:8)
//
//        // Escribir en slv_reg0 para establecer 'fila', 'columna', 'dato'
//        MATRIZPUNTOS_mWriteReg(MATRIZ_BASEADDR, MATRIZPUNTOS_S00_AXI_SLV_REG0_OFFSET, reg_value);
//
//        // La señal 'load' se activa automáticamente al escribir en slv_reg0
//        usleep(100); // Pequeño retraso para asegurar la escritura
//    }
//}
//
//
//int main() {
//    // Escribir los patrones de cada carácter en la RAM
//    for (u32 char_idx = 0; char_idx < 7; char_idx++) {
//        write_character_to_ram(char_idx, CHARACTERS[char_idx]);
//    }
//
//    // Bucle principal
//    while (1) {
//        // El módulo VHDL maneja la visualización continua del mensaje
//        usleep(1000000); // Esperar 1 segundo
//    }
//
//    return 0;
//}

const u8 CHARACTERS[7][8] = {
    {4, 4, 4, 4, 4, 4, 4, 4},       // I
    {14, 31, 31, 31, 14, 4, 0, 0},  // ❤
    {14, 17, 16, 16, 16, 17, 14, 0}, // C
    {14, 17, 17, 17, 17, 17, 14, 0}, // O
    {30, 17, 17, 30, 16, 16, 16, 0}, // P
    {30, 17, 17, 30, 20, 18, 17, 0}, // R
    {14, 17, 17, 17, 17, 17, 14, 0}  // O
};

// Función para escribir un punto específico en la RAM del periférico
void write_to_matrix(u32 fila, u32 columna, u32 dato) {
    u32 reg_value = 0;
    reg_value |= (fila & 0x7) << 24;    // Fila (bits 26:24)
    reg_value |= (columna & 0x7) << 17; // Columna (bits 19:17)
    reg_value |= (dato & 0x1F) << 8;    // Dato (bits 12:8)

    MATRIZPUNTOS_mWriteReg(MATRIZ_BASEADDR, MATRIZPUNTOS_S00_AXI_SLV_REG0_OFFSET, reg_value);

    reg_value |= (1 << 0); // Activar señal de carga
    MATRIZPUNTOS_mWriteReg(MATRIZ_BASEADDR, MATRIZPUNTOS_S00_AXI_SLV_REG0_OFFSET, reg_value);

    usleep(100); // Espera para garantizar la carga
}

// Función para mostrar un carácter en la matriz
void display_character(const u8 *char_data, u32 start_col) {
    for (u32 fila = 0; fila < 8; fila++) {
        for (u32 col_offset = 0; col_offset < 5; col_offset++) {
            u32 columna = start_col + col_offset;
            u32 dato = (char_data[fila] >> (4 - col_offset)) & 0x01; // Extrae cada bit
            write_to_matrix(fila, columna, dato);
        }
    }
}

int main() {
    // Posiciones iniciales para cada carácter
    u32 start_positions[7] = {0, 6, 12, 18, 24, 30, 36};

    // Mostrar el mensaje en la matriz
    while (1) {
        for (u32 i = 0; i < 7; i++) {
            display_character(CHARACTERS[i], start_positions[i]);
        }

        // Mantener el mensaje constante
        usleep(100000); // 100 ms
    }

    return 0;
}

