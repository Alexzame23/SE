#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "sleep.h"

// Headers generados por el IP Packager:
#include "conversorad.h"
#include "altavoz.h"
#include "matrizpuntos.h"

// Direcciones base de los periféricos (ajusta según tu diseño)
#define ADC_BASEADDR XPAR_CONVERSORAD_0_S00_AXI_BASEADDR
#define ALTAVOZ_BASEADDR 0
#define MATRIZ_BASEADDR XPAR_MATRIZPUNTOS_0_S00_AXI_BASEADDR

//// Patrones para los caracteres
const u8 CHARACTERS[7][9] = {
		{4, 10, 0, 14, 14, 30, 30, 14 ,0},       // I
		{4, 31, 0, 17, 17, 17, 17, 17, 0},  // ❤
		{4, 31, 0, 16, 17, 17, 17, 17, 0}, // C
		{4, 31, 0, 16, 17, 30, 30, 17, 0}, // O
		{4, 14, 0, 16, 17, 16, 20, 17, 0}, // P
		{4,  4, 0, 17, 17, 16, 18, 17, 0}, // R
		{4,  0, 0, 14, 14, 16, 17, 14, 0}  // O
	//   I  ❤               C   O   P   R   O
};

//u32 read_potentiometer() {
//    // Inicia una conversión escribiendo en el registro de control (reg0)
//    CONVERSORAD_mWriteReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG0_OFFSET, 0x1);
//
//    // Espera a que la conversión termine
//    while (!(CONVERSORAD_mReadReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG1_OFFSET) & 0x1));
//
//    // Lee el valor convertido del registro de datos (reg1)
//    u32 pot_value = CONVERSORAD_mReadReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG1_OFFSET);
//
//    return pot_value & 0xFF;  // Devuelve solo los 8 bits de la conversión
//}

void write_character_to_ram(u32 char_idx, const u8 *char_data) {
	for (u32 row = 0; row < 8; row++) {
		u8 dato = char_data[row]; // Dato de 5 bits para la fila

		u32 reg_value = 0;
		reg_value |= (char_idx & 0x7) << 24;    // fila (bits 26:24)
		reg_value |= (row & 0x7) << 17;         // columna (bits 19:17)
		reg_value |= (dato & 0x1F) << 8;        // dato (bits 12:8)

		// Escribir en slv_reg0 para establecer 'fila', 'columna', 'dato'
		MATRIZPUNTOS_mWriteReg(MATRIZ_BASEADDR, MATRIZPUNTOS_S00_AXI_SLV_REG0_OFFSET, reg_value);

		// La señal 'load' se activa automáticamente al escribir en slv_reg0
		usleep(100); // Pequeño retraso para asegurar la escritura
	}
}

int main() {
    u32 valor;
    u8 canal = 2; // Ajusta el canal del potenciómetro
    u8 dato_adc;
    u32 comando_adc;
    u32 valor_altavoz;

	// Escribir los patrones de cada carácter en la RAM
	for (u32 char_idx = 0; char_idx < 7; char_idx++) {
		write_character_to_ram(char_idx, CHARACTERS[char_idx]);
	}
//
//    while(1) {
//        //--------------------------
//        // 1. Iniciar Conversión ADC
//        // Colocar el canal en bits [26:24] y escribir en slv_reg0 de conversorad
//        comando_adc = (canal << 24);
//        CONVERSORAD_mWriteReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG0_OFFSET, comando_adc);
//
//        // 2. Esperar a que el bit 23 (data ready) se ponga a 1
//        do {
//            valor = CONVERSORAD_mReadReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG0_OFFSET);
//        } while ((valor & (1 << 23)) == 0);
//
//        // 3. Leer el dato desde slv_reg1 del ADC
//        valor = CONVERSORAD_mReadReg(ADC_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG1_OFFSET);
//        dato_adc = (u8)(valor & 0xFF); // 8 bits de resultado
//
//        xil_printf("Valor ADC: %d\r\n", dato_adc);
//
//        //--------------------------
//        // 4. Ajustar el altavoz según el valor del potenciómetro
//        // El altavoz cambia su frecuencia de toggling según slv_reg0.
//        // Si el valor es muy pequeño, toggleará más seguido → tono más agudo.
//        // Mapeo simple: Mientras más grande sea dato_adc, más lento toggleará.
//        // Invertimos la lógica: si queremos más potencia con mayor valor ADC, podemos
//        // usar un valor pequeño cuando el ADC es grande.
//        // Ej: valor_altavoz = 1024 - (dato_adc * 4)
//        // Esto hace que si ADC=255, valor_altavoz sea más pequeño, toggling más frecuente.
//        // Ajusta la fórmula a tu gusto:
//
        //valor_altavoz = 1024 - (dato_adc * 4);
        //if (valor_altavoz < 1) valor_altavoz = 1; // Evitar 0 para no colgar
        // Escribir en slv_reg0 del altavoz
        //(ALTAVOZ_BASEADDR, ALTAVOZ_S00_AXI_SLV_REG0_OFFSET, valor_altavoz);

        usleep(100000); // Esperar 100 ms antes de la siguiente lectura
//    }

    u32 adc_val;         // Valor leído del potenciómetro
    u32 persistence;       // Valor de persistencia calculado

    while (1) {
        // Lee el valor del potenciómetro
    	CONVERSORAD_mWriteReg(XPAR_CONVERSORAD_0_S00_AXI_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG0_OFFSET, 1);

        //do {
            adc_val = CONVERSORAD_mReadReg(XPAR_CONVERSORAD_0_S00_AXI_BASEADDR, CONVERSORAD_S00_AXI_SLV_REG0_OFFSET);
        //} while ((adc_val & 0x80000000) == 0); // esperar a ready en bit 31 (ejemplo)
        // Calcula la persistencia basada en el valor del potenciómetro
        // Ajusta este cálculo según los requisitos de tu sistema
        //persistence = (pot_value * 1000) / 255; // Normaliza entre 0 y 1000 ms

        // Configura la persistencia de la matriz
        //MATRIZPUNTOS_mWriteReg(MATRIZ_BASEADDR, XPAR_MATRIZPUNTOS_0_S00_AXI_BASEADDR, persistence);

        xil_printf("Potenciómetro: %d %d\r\n", adc_val);

        // Opcional: Espera antes de volver a leer el potenciómetro
        usleep(100000); // 100 ms
    }

    return 0;
}
